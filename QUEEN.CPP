

/*  This program implements the game of eight queens.   */
//   In this game, you have to place eight queens on a chess board
//   such that no queen can take other....


/*  To include all the necessary header files     */

# include <graphics.h>
# include <dos.h>
# include <conio.h>
# include <iostream.h>
# include <stdlib.h>
# include <time.h>
# include <string.h>

//   Defining all the functions used in the program


void opening_page();			// for drawing opening page
void drawpixel(int,int,int,int);	// drawing pixels randomly
		// first two arguments are for checking x and y inner
		// boundary conditions , third for taking random value
		// of y co-ord. i.e. max. y and the forth for no. of
		// pixels to be displayed.

void second_page();			// drawing second page
void choice_page();			// choice page
void usersol();				// user solution
void compsol();				// computer solution
void instructions();			// instructions
void getbuff(int);			// get image of queen
				// The argument passed is the color of
				// the background since you need to restore
				// the original settings after drawing the
				// temp. image .
void funda();				// find position of queens
					// (comp. generated solns.)
void putqueen();			// place queen at positions found
					// by computer
void chess(int,int,int);		// draw chess board
				// The first two arguments are the x and y
				// co-ord. of top left corner of the chess
				// i.e. from where chess starts and the
				// 3rd is the size of each square of the
				// chess.
void display();				// display solns. generated by comp.
void backtrace();			// removing wrongly placed queens
					// (in comp. generated soln.)
void backtracenew();			// Backtracing will start 5th queen
					// onwards (comp. generated soln.)


  // All the six functions defined now are used in Instructions function
void horizontal(int,int);		// Cut queen horizontally
void vertical(int,int);			// Cut queen vertically
void diagonalup(int,int);		// Cut queen dia. up
void diagonaldown(int,int);		// Cut queen dia. down
				// In all above four functions, both
				// arguments are x and y co-ord. till
				// where queen needs to be moved.
inline void keytocont();         	// Press any key to continue
inline void erase();			// Clear Text


inline void nosol();			// No soln. (comp. generated solns.)
void setcompscreen();			// Set screen where comp. will
					// display solutions
void abc(int,int,int);			// Number chess board
				// The first two arguments are x and y
				// co-ord. from where to start writing the
				// text and the third co-ord. is size of square.
void num123(int,int,int);		// --- do ---
void setuserscreen();			// Set screen where user will
					// try out the solution
void compinit();			// Initialize values before comp.
					// starts finding solutions
void userinit();			// Initialize values before user
					// starts finding out a soln.
void replacequeen(int *,int*,int,int);	// replace a queen if home key
					// is pressed
				// The first two as well as last two are
				// x and y co-ord. of top left corner of
				// queen which was being moved by the user
				// till now. First two are pointers since
				// new position found in fn. needs to be
				// passed back and last two are passed
				// since original position can also be reqd.
int checkpos(int,int);                  // check whether queen entered in
					// the position by user is o.k.
				// The two arguments are x and y co-ord. of
				// the top left corner of the queen currently
				// being moved by the user
void userwin();				// display suitable message if user
					// is successful
inline void show(char *, int *);	// Displaying our names (used in
					// fn. second_page )
				// The first argument is the name to be
				// displayed and the second is the y co-ord.
				// from where to display the name
void drawqueen(int ,int);		// Draw queen
				// The two arguments are x and y co-ord.
				// from where to start drawing the queen
  /* Defining global variables */

int queen,diaup[15],diadown[15],col[8],queensol[8],row[8],n;
int column,no_of_sol,xx,yy,*pic='\0';
int *buff='\0';
int gd=DETECT,gm;


// *******  THE MAIN FUNCTION  ************


void main()
{
  clrscr();
  randomize();
  opening_page();
  second_page();

   choice_page();
}

// ******** THE OPENING PAGE'S LOGIC IS HERE  ***********


void opening_page()
{
	int gdriver = DETECT, gmode, errorcode;
	initgraph(&gd, &gm, "c:\\tc\\bgi");

//  initgraph(&gd,&gm,"");
  int x,a=32,y=30,c,color,oldy=y;
  setcolor(4);
  setfillstyle(1,0);
  rectangle(8,8,639,472);
  floodfill(29,30,4);
  drawpixel(9,9,472,10000);
  char *str="Welcome To This Project";
  x=a;
  int k=1;
  while (*str!='\0')
    {
      setcolor(7);
      gotoxy(1,1);
      cout<<*str;                  // write str character by character at 1,1
      if (k==9)			// if next word i.e. To , change line
	{
		y=120;
		oldy=y;
		x=150;
		a=x;
	 }
   if (k==12)			// next word - This - change line
	{
		y=210;
		oldy=y;
		x=200;
		a=x;
	}
    if (k==17)			// next word - Project - change line
	{
		y=300;
		oldy=y;
		x=315;
		a=x;
	}
 for (int i=1;i<15;i++) 	// Since each char. in 8 x 15 pixel
				// size
	{
		for (int j=0;j<8;j++)
		 {
			c=getpixel(j,i);
			    if (c==7)	// if pixel at position j,i
					// is colored, draw a rectangle
					// correspondingly
				{   color=random(16);

					while(color==0)

						{
						  color=random(16);
						}
				    setcolor(14);
				    setfillstyle(1,color);
				     sound(x*2 + i*50 + j*50);
				     rectangle(x,y,x+5,y+5);
				     floodfill(x+1,y+1,14);
				     delay(20);

				   }
			    nosound();
			    x+=5;

		 }
	y+=5;
	x=a;

	}
 y=oldy;
 a+=40;
 str++;				// point to next character now
 k++;
}

gotoxy(1,1);cout<<"  ";
settextstyle(0,0,1);
outtextxy(150,450,"Press any key to continue . . . . ");
getch();
closegraph();
restorecrtmode();
}

// *****  Draws pixel randomly  *****

void drawpixel(int a,int b,int c,int d)
{
 int x_co,y_co,color;
  for (int count=0;count<d;count++)
    {  x_co=random(639);
      y_co=random(c);
      color=0;
       while(color==0)
       {
       color=random(16);
       }
      if (x_co<a||y_co<b) continue;
      putpixel(x_co,y_co,color);
    }
}

// ******* THE SECOND PAGE IS DRAWN HERE *******

void second_page()
{
 int temp=30,tempy,y1;
 initgraph(&gd,&gm,"c:\\tc\\bgi");
 int x=640,oldx=x,y=60,c,k;
 char *s[]={"E","i","g","h","t"," ","Q","u","e","e","n","s"};
 settextstyle(4,0,6);
 for (int j=0;j<12;j++)
 {
   k=random(2);            // chooses randomly whether alphabet will
			  // come from bottom or from right
   if (k==0)              // From Right ...
   {
    for (int i=1;i<20;i++)
     {
       c=random(16);
       while(c==0)
	{
	  c=random(16);
	}
       setcolor(c);
       outtextxy(x,y,s[j]);
       setcolor(0);
       if(j!=5) sound(1000+i*100);
       delay(30);
       outtextxy(x,y,s[j]);
       if (j!=5) sound(500+i*100);
       delay(30);
       nosound();
       x=x-30;
     }
    c=random(16);
    while(c==0)
     {
       c=random(16);
     }
    setcolor(c);
    outtextxy(x,y,s[j]);
    temp=x;
    x=oldx+40;
    oldx=x;
   }
  else		// alphabet from bottom
   {
    tempy=400;
	for (int i=1;i<21;i++)
	 {
		x=temp+40;
		c=random(16);
		 while(c==0)
		 {
		   c=random(16);
		 }
		 setcolor(c);
		 outtextxy(x,tempy,s[j]);
		   if (j!=5) sound(1500+i*100);
		   setcolor(0);
		    delay(30);
		    outtextxy(x,tempy,s[j]);
		    if (j!=5) sound(200+i*200);
		    delay(30);
		    nosound();
		    tempy=tempy-17;
	 }
    c=random(16);
    while(c==0)
	 {
	   c=random(16);
	 }

    setcolor(c);
    outtextxy(x,tempy,s[j]);
    temp=x;
    x=oldx+40;
    oldx=x;
   }
}

/*   For drawing a line beneath "Eight Queens"   */

for (int n=640;n<1100;n+=30)
{
 for (int i=n;i>-579+n;i--)
   {
     c=random(16);
     while(c==0)
      { c=random(16);}
	setcolor(c);
	outtextxy(i,90,"_");
	setcolor(0);
	outtextxy(i,90,"_");
       }
     sound(1400);
     delay(80);
     while(c==0)
      {
	c=random(16);
      }
     setcolor(c);
     outtextxy(i,90,"_");
     nosound();
   }
settextstyle(1,0,2);
setcolor(6);
outtextxy(370,240,"Made by : ");
settextstyle(7,0,3);
y1=250;
setcolor(14);
show("Udit Sawhney",&y1);
show("Aditya Bhatia",&y1);
show("Rahul Agarwal",&y1);
show("Saurabh Bajaj",&y1);
setcolor(1);
settextstyle(4,0,2);
outtextxy(160,420,"Press any key to continue ....");
getch();
closegraph();
restorecrtmode();
}

//  ***** OUR NAMES DISPLAYED VIA THIS *******

void show(char *s, int *y)
{
(*y)+=(textheight(s));
outtextxy(400,*y,s);
}

//   ******  THE CHOICE PAGE  ********

void choice_page()
{
  initgraph(&gd,&gm,"c:\\tc\\bgi");
  setcolor(10);
  settextstyle(1,0,6);
  outtextxy(10,10,"E i g h t   Q u e e n s");
  setcolor(3);
  settextstyle(4,0,3);
  outtextxy(160,120,"1 .");
  outtextxy(160,200,"2 .");
  outtextxy(160,280,"3 .");
  outtextxy(160,360,"4 .");
  setcolor(1);
  settextstyle(7,0,3);
  outtextxy(220,120,"P l a y");
  setcolor(4);
  outtextxy(220,200,"S h o w  S o l u t i o n s");
  setcolor(8);
  outtextxy(220,280,"I n s t r u c t i o n s");
  setcolor(5);
  outtextxy(220,360,"E x i t ");
  setcolor(6);
  settextstyle(5,0,2);
  outtextxy(130,420,"Enter your choice : ( 1 / 2 / 3 / 4 )");
  char ch;
  do
  {
  ch=getch();
  if (ch=='1')
    {
	closegraph();
	restorecrtmode();
	usersol();
	return;
    }
  else if (ch=='2')
    {
	closegraph();
	restorecrtmode();
	compsol();
	return;
    }
   else if (ch=='3')
    {
	closegraph();
	restorecrtmode();
	instructions();
	return;
    }

   else if (ch=='4')
    {
	closegraph();
	restorecrtmode();
	return;
    }

  }
    while (ch!='1' && ch!='2' && ch!='3'&& ch!='4');
}

// *******  CHOICE : USER SOLUTION  *********

void usersol()
{
setuserscreen();   // To set the screen for the user
userinit();	      // To initialize the variables
int x1=67,y1=91;
putimage (x1,y1,buff,1);
char ch;
do
   {
	ch=getch();
	if (ch=='6'|| ch==77)   // Move right
	{
	   if (x1+40>380 || (getpixel(x1+43,y1+4)!=0 && getpixel(x1+43,y1+4)!=15)) continue;
			// Not move if boundary , or if a queen is there
			// and similar is for other tested below
	   putimage(x1,y1,buff,1);
	   x1+=40;
	  putimage(x1,y1,buff,1);
	  continue;
	}
	if (ch=='4'|| ch==75)		// Move left
	{
	   if (x1-40<60 || (getpixel(x1-37,y1+4)!=0 && getpixel(x1-37,y1+4)!=15)) continue;
	   putimage(x1,y1,buff,1);
	   x1-=40;
	   putimage(x1,y1,buff,1);
	   continue;
	}

	if (ch=='8'|| ch==72)		// Move up
	{
	  if (y1-40<80 || (getpixel(x1+3,y1-36)!=0 && getpixel(x1+3,y1-36)!=15)) continue;
	  putimage(x1,y1,buff,1);
	  y1-=40;
	  putimage(x1,y1,buff,1);
	  continue;
	}
	if (ch=='2'||ch==80)		// Move down
	{
	  if (y1+40>400 || (getpixel(x1+3,y1+44)!=0 && getpixel(x1+3,y1+44)!=15)) continue;
	  putimage(x1,y1,buff,1);
	  y1+=40;
	  putimage(x1,y1,buff,1);
	  continue;
	}
	if (ch=='7')			// Move left up diagonally
	{
	 if (x1-40<60 || y1-40<80 || (getpixel(x1-37,y1-36)!=0 && getpixel(x1-37,y1-36)!=15)) continue;
	 putimage(x1,y1,buff,1);
	 x1-=40;y1-=40;
	 putimage(x1,y1,buff,1);
	 continue;
	}
	if (ch=='3')			// Move right bottom diagonally
	{
	 if (x1+40>380 || y1+40>400 || (getpixel(x1+43,y1+44)!=0 && getpixel(x1+43,y1+44)!=15)) continue;
	 putimage(x1,y1,buff,1);
	 x1+=40;y1+=40;
	 putimage(x1,y1,buff,1);
	 continue;
	}
	if (ch=='9')			// Move right up diagonally
	{
	if (x1+40>380 || y1-40<80 || (getpixel(x1+43,y1-36)!=0 && getpixel(x1+43,y1-36)!=15)) continue;
	putimage(x1,y1,buff,1);
	x1+=40;y1-=40;
	putimage(x1,y1,buff,1);
	continue;
	}
	if (ch=='1')			// Move left bottom diagonally
	{
	 if (x1-40<60 || y1+40>400 || (getpixel(x1-37,y1+44)!=0 && getpixel(x1-37,y1+44)!=15)) continue;
	 putimage(x1,y1,buff,1);
	 x1-=40;y1+=40;
	putimage(x1,y1,buff,1);
	continue;
	}
	if (ch==71)		// if home key pressed
	{
	 if (queen==0) continue;  // do nothing if 1st queen is being placed
				   // since no queen to remove then
	 int oldx=x1,oldy=y1;
	 putimage(x1,y1,buff,1);
	 replacequeen(&x1,&y1,oldx,oldy);
	}
	if (ch==13)		    // if enter pressed , i.e. queen placed
	{
	  if (checkpos(x1,y1))	   // if position o.k.
	  {
	    if (queen==8)    // if 8 queens placed successfully , user wins
		   {
			userwin();
			return;
		   }
	    if (x1+40>380) x1-=40;  // Place next queen to be placed
	      else x1+=40;
	    putimage(x1,y1,buff,1);
	  }
	else continue;
	}

  } while (ch!=27);
delete buff;
closegraph();
restorecrtmode();
choice_page();
}

//  *****  TO SET THE SCREEN FOR THE USER  *******

void setuserscreen()
{
initgraph(&gd,&gm,"c:\\tc\\bgi");
setcolor(1);
setfillstyle(1,5);
rectangle(450,0,639,479);
floodfill(451,1,1);
for (int i=0;i<479;i++)
  outtextxy(500,i,"|");
settextstyle(0,0,1);
outtextxy(465,20,"Key");   // Define keys
outtextxy(462,25,"----");
outtextxy(525,20,"Function");
outtextxy(522,25,"---------");
outtextxy(470,40,"6");
outtextxy(515,40,"Move Right");
outtextxy(470,60,"4");
outtextxy(515,60,"Move Left");
outtextxy(470,80,"8");
outtextxy(515,80,"Move Up");
outtextxy(470,100,"2");
outtextxy(515,100,"Move Down");
outtextxy(470,120,"7");
outtextxy(515,120,"Move Left Up");
outtextxy(470,140,"9");
outtextxy(515,140,"Move Right Up");
outtextxy(470,160,"1");
outtextxy(515,160,"Move Left Down");
outtextxy(470,180,"3");
outtextxy(515,180,"Move Right Down");
outtextxy(461,200,"Enter");
outtextxy(515,200,"Place the Queen");
outtextxy(463,220,"Esc");
outtextxy(515,220,"Return to Main");
outtextxy(515,240,"Menu");
outtextxy(462,260,"Home");
outtextxy(515,260,"Re-position a ");
outtextxy(515,275,"queen. Press");
outtextxy(515,290,"enter after ");
outtextxy(515,305,"selecting a ");
outtextxy(515,320,"queen or press");
outtextxy(515,335,"'Home' key ");
outtextxy(515,350,"again to undo");
outtextxy(515,365,"re-positioning");
getbuff(0);		// get image of queen
setcolor(9);
setfillstyle(1,14);
rectangle(0,0,439,479);
floodfill(1,1,9);
chess(60,80,40);
abc(80,420,40);
num123(400,100,40);
}

//  ******  TO STORE THE IMAGE OF THE QUEEN IN A POINTER  *******

void getbuff(int color)
{
setfillstyle(1,0);
bar(350,420,390,460);
drawqueen(360,450);
buff=new int(sizeof(imagesize(352,434,377,450)));
getimage(352,434,377,450,buff);
putimage (352,434,buff,1);
setfillstyle(1,color);
bar(350,420,390,460);
}


//   ******  TO DRAW THE QUEEN  *********

void drawqueen(int x,int y)
{
setcolor(4);
setfillstyle(1,1);
line(x,y,x+10,y);
moveto(x+10,y);
linerel(5,-12);
linerel(-5,3);
linerel(-5,-3);
linerel(-5,3);
linerel(-5,-3);
linerel(5,12);
floodfill(x+3,y-5,4);
line(x+13,y-7,x-3,y-7);
line(x+11,y-3,x-1,y-3);
setcolor(4);
outtextxy(x+12,y-17,"+");
outtextxy(x+2,y-17,"+");
outtextxy(x-8,y-17,"+");
line(x+2,y-5,x+6,y-5);
line(x+4,y-6,x+4,y-4);
}

// *****  TO DRAW THE CHESS BOARD  ********

void chess(int x,int y,int z)
{
setcolor(4);
int color=0,color1=15,color_temp,oldx=x;
rectangle(x,y,x+z*8,y+z*8);
for (int i=0;i<8;i++)
  {
    for (int j=0;j<8;j++)
     {
      setfillstyle(1,color);
      rectangle(x,y,x+z,y+z);
      floodfill(x+5,y+5,4);
      if (j!=7)	// Don't change color if coming to next row
       {
	color_temp=color;
	color=color1;
	color1=color_temp;
       }
      x=x+z;
      }
   x=oldx;
   y+=z;
  }

}

// *****  TO WRITE ALPHABETS FOR THE CORRESPONDING  *******
// *****   ROWS OF THE CHESS BOARD ACCORDING TO ******
//  ****     THE INTERNATIONAL RULES  *******

void abc(int x,int y,int z)
{
outtextxy(x,y,"a");
outtextxy(x+z,y,"b");
outtextxy(x+z*2,y,"c");
outtextxy(x+z*3,y,"d");
outtextxy(x+z*4,y,"e");
outtextxy(x+z*5,y,"f");
outtextxy(x+z*6,y,"g");
outtextxy(x+z*7,y,"h");
}

// *****  TO WRITE NUMBERS FOR THE CORRESPONDING  *******
// *****   ROWS OF THE CHESS BOARD ACCORDING TO ******
//  ****     THE INTERNATIONAL RULES  *******

void num123(int x,int y,int z)
{
outtextxy(x,y,"1");
outtextxy(x,y+z,"2");
outtextxy(x,y+z*2,"3");
outtextxy(x,y+z*3,"4");
outtextxy(x,y+z*4,"5");
outtextxy(x,y+z*5,"6");
outtextxy(x,y+z*6,"7");
outtextxy(x,y+z*7,"8");
}

// ******  FUNCTION TO INITIALIZE VARIABLES FOR THE USER  *******

void userinit()
{
   queen=0;
   for (int i=0;i<8;i++)
    {
      col[i]=1;         // since all conditions true initially
      row[i]=1;
      queensol[i]=20;
    }
    for (i=0;i<15;i++)
    {
      diaup[i]=1;
      diadown[i]=1;
    }
}


//  ******  TO CHECK IF POSITION OF QUEEN IS VALID  *******
//  ******  AND TO SHOW HOW IS IT BEING CROSSED BY ********
//  ****  OTHER QUEENS , IF AT ALL IT IS BEING CROSSED *****

int checkpos(int x, int y)
{
  int hori;
  hori=(x-67)/40;  	// To find which column queen is on at present
  column=(y-91)/40;    // To find which row queen is on at present

  if (row[hori] && col[column] && diaup[hori+column] && diadown[hori-column+7])
	// Check if all conditions true for placed queen
    {
      row[hori]=0;                    // All conditions become false
      col[column]=0;		      // now for the placed queen
      diaup[hori+column]=0;
      diadown[hori-column+7]=0;
      queensol[hori]=column;
      queen++;
      return 1;
    }
  else
    {				// if placed queen is being cut by
				// some other queen previously placed

     if (row[hori]==0)          // If a queen on same column is cutting
	{   int oldy=y;
	    y=queensol[hori]*40+91;
	    int oldy2=y;
	    while(y!=oldy)
	     {
	      putimage(x,y,buff,1);
	      sound(2000+y*5);
	      delay(30);
	      if (y<oldy) y+=40; else y-=40;
	      putimage(x,y,buff,1);
	      delay(30);
	      nosound();
	     }
	   while (y!=oldy2)
	     {
	      putimage(x,y,buff,1);
	      sound(2000+y*5);
	      delay (30);
	      if (y<oldy2) y+=40; else y-=40;
	      putimage(x,y,buff,1);
	      delay(30);
	      nosound();
	     }
	 y=oldy;
	}
     if (col[column]==0)      // If a queen is there on the same row
	{
	  int oldx=x;
	    for (int i=0;i<8;i++)
	      if (queensol[i]==column) break;
	    x=i*40+67;
	    int oldx2=x;
	    while (x!=oldx)
	     {
	      putimage(x,y,buff,1);
	      sound(2000 + x*5);
	      delay(30);
	      if (x<oldx) x+=40; else x-=40;
	      putimage(x,y,buff,1);
	      delay(30);
	      nosound();
	     }
	    while (x!=oldx2)
	     {
	      putimage(x,y,buff,1);
	      sound(2000+x*5);
	      delay(30);
	      if (x<oldx2) x+=40;else x-=40;
	      putimage(x,y,buff,1);
	      delay(30);
	      nosound();
	     }
	   x=oldx;
	}
     if (diaup[hori+column]==0)   // If a queen is there on the same
				// diagonal (up dia)
	{
	   for (int i=0;i<8;i++)
	     if (i+queensol[i]==hori+column) break;
	   int oldx=x,oldy=y;
	   x=i*40+67;
	   y=queensol[i]*40+91;
	   int oldx2=x;
	   while (x!=oldx)
	     {
	      putimage(x,y,buff,1);
	      sound(1000+x*5);
	      delay(30);
	      if (x<oldx)
		{ x+=40;y-=40;}
	      else
		{ x-=40;y+=40;}
	      putimage(x,y,buff,1);
	      delay(30);
	      nosound();
	     }
	   while (x!=oldx2)
	     {
	       putimage(x,y,buff,1);
	       sound(1000+x*5);
	       delay(30);
	       if (x<oldx2)
		 { x+=40;y-=40;}
	       else { x-=40;y+=40;}
	       putimage(x,y,buff,1);
	       delay(30);
	       nosound();
	     }
	    x=oldx;y=oldy;
	}
     if (diadown[hori-column+7]==0)    // If a queen is there on the
					// same diagonal (dia down)
	{
	  for (int i=0;i<8;i++)
	    if (i-queensol[i]==hori-column) break;
	  int oldx=x,oldy=y;
	   x=i*40+67;
	   y=queensol[i]*40+91;
	   int oldx2=x;
	   while (x!=oldx)
	     {
	       putimage(x,y,buff,1);
	       sound(1000+x*5);
	       delay(30);
	       if (x<oldx)
		  { x+=40;y+=40;}
	       else
		  { x-=40;y-=40;}
	       putimage(x,y,buff,1);
	       delay(30);
	       nosound();
	     }
	  while (x!=oldx2)
	     {
	       putimage(x,y,buff,1);
	       sound(1000+x*5);
	       delay(30);
	       if (x<oldx2)
		 { x+=40;y+=40;}
	       else
		 { x-=40;y-=40;}
	       putimage(x,y,buff,1);
	       delay(30);
	       nosound();
	     }
	  x=oldx;y=oldy;
	}
  return 0;
    }
}

//  ******  TO DISPLAY SUITABLE MESSAGE IF USER IS SUCCESSFUL  ******

void userwin()
{
 settextstyle( 7,0,2);
 outtextxy(10,35,"Great performance , I must admit ! !");
 settextstyle(1,0,1);
 outtextxy(30,430,"Press any key to return to main menu ....");
 getch();
 restorecrtmode();
 closegraph();
 choice_page();
}

// ******  TO REPLACE POSITION IF HOME KEY IS PRESSED  *********

void replacequeen(int *x1,int *y1, int a, int b)
{
  int *box;			// define pointer for storing image of box
  setcolor(6);
  setfillstyle(1,7);
  rectangle(20,20,60,60);
  floodfill(21,21,6);
  box=new int (sizeof(imagesize(20,20,60,60))); // store image of box
  getimage(20,20,60,60,box);
  putimage(20,20,box,1);
  setfillstyle(1,14);
  bar(20,20,60,60);
  *x1=60;*y1=80;  			// place box initially at 0,0
  putimage(*x1,*y1,box,1);
  char ch;
  do
  {
     ch=getch();
     if (ch=='6'|| ch==77)		// move right
       {
	   if (*x1+40>=380 ) continue;  // Don't move if boundary.
					// Similarly for other similar
					// conditions tested down.
	   putimage(*x1,*y1,box,1);
	   *x1+=40;
	   putimage(*x1,*y1,box,1);
	   continue;
       }
     if (ch=='4'|| ch==75)		// move left
       {
	  if (*x1-40<60 ) continue;
	  putimage(*x1,*y1,box,1);
	  *x1-=40;
	  putimage(*x1,*y1,box,1);
	  continue;
       }
    if (ch=='8'|| ch==72)		// move up
       {
	  if (*y1-40<80 ) continue;
	  putimage(*x1,*y1,box,1);
	  *y1-=40;
	  putimage(*x1,*y1,box,1);
	  continue;
       }
    if (ch=='2'||ch==80)		// move down
       {
	  if (*y1+40>=400) continue;
	  putimage(*x1,*y1,box,1);
	  *y1+=40;
	  putimage(*x1,*y1,box,1);
	  continue;
       }
    if (ch=='7')			// move left up diagonally
       {
	  if (*x1-40<60 || *y1-40<80 ) continue;
	  putimage(*x1,*y1,box,1);
	  *x1-=40;*y1-=40;
	  putimage(*x1,*y1,box,1);
	  continue;
       }
   if (ch=='3')			// move right down diagonally
       {
	  if (*x1+40>=380 || *y1+40>=400 ) continue;
	  putimage(*x1,*y1,box,1);
	  *x1+=40;*y1+=40;
	  putimage(*x1,*y1,box,1);
	  continue;
       }
   if (ch=='9')                    // move right up diagonally
       {
	  if (*x1+40>=380 || *y1-40<80 ) continue;
	  putimage(*x1,*y1,box,1);
	  *x1+=40;*y1-=40;
	  putimage(*x1,*y1,box,1);
	  continue;
	}
   if (ch=='1')                     // move left down diagonally
      {
	  if (*x1-40<60 || *y1+40>=400 ) continue;
	  putimage(*x1,*y1,box,1);
	  *x1-=40;*y1+=40;
	  putimage(*x1,*y1,box,1);
	  continue;
       }
  if (ch==13)		      // if enter key pressed
      {
	  int tempx,tempy;
	  tempx=(*x1-60)/40;
	  tempy=(*y1-80)/40;
	  if (queensol[tempx]==tempy)	// check if queen is there where
				       //  enter key is pressed
		{
		  putimage(*x1,*y1,box,1);          // If yes, remove box
		  *x1+=7;*y1+=11;
		  delete box;
		  getbuff(14);                     // Get image of queen
		  row[tempx]=1;	    // Conditions become true for the
		  col[tempy]=1;	   // queen being replaced
		  diaup[tempx+tempy]=1;
		  diadown[tempx-tempy+7]=1;
		  queensol[tempx]=20;
		  queen--;            // Since queen replaced, no. of queens
				      // placed are decremented by one.
		  return;
		}
	  else continue;	// if no queen there where enter
				// is pressed , do nothing
      }
  if (ch==71)                    // if home key pressed again
      {
	putimage(*x1,*y1,box,1);	// return to initial stage
	*x1=a;*y1=b;
	delete box;
	getbuff(14);
	putimage(*x1,*y1,buff,1);
	continue;
      }
  if (ch==27)			// if Esc key pressed, main menu...
      { delete box;
	delete buff;
	closegraph();
	restorecrtmode();
	choice_page();
	exit(0);
      }
  } while (ch!=71);
}


// ******  TO GENERATE THE COMPUTER SOLUTIONS  ********

void compsol()
{
setcompscreen();
compinit();
}

// *******  TO SET THE SCREEN WHERE COMPUTER  ********
// *******  WILL SHOW THE SOLUTIONS *********

void setcompscreen()
{
initgraph(&gd,&gm,"c:\\tc\\bgi");
getbuff(0);		// get image of queen and store it in a pointer
setcolor(9);
setfillstyle(1,14);
rectangle(0,0,639,479);
floodfill(1,1,9);
chess(20,60,30);   	// draw chess
chess(340,60,30);
outtextxy(100,40,"Solution");
outtextxy(420,40,"Solution");
abc(30,310,30);           // number the chess board as per the
abc(350,310,30);	       // international rules
num123(270,70,30);
num123(590,70,30);
}

// ******  TO INITIALIZE VALUES FOR   ********
// ******  GENERATING COMP. SOLUTION  ********

void compinit()
{
for (int i=0;i<8;i++)               //  all conditions are true initially
    col[i]=1;
for (i=0;i<15;i++)
	{
	  diaup[i]=1;
	  diadown[i]=1;
	}
queensol[0]=0;        		// first queen placed initially at 0,0
queen=1;			// place second queen now
column=0;			// all conditions for first queen
col[0]=0;			// become false
diaup[0]=0;
diadown[0]=0;
no_of_sol=0;			// no. of solns. zero initially
funda();			// start finding position for queens
}

//  *****  TO FIND POSITION OF THE QUEENS ******
//  *****   COMPUTER GENERATED SOLUTION  ******

void funda()		// placing queens at correct positions
{
if (no_of_sol==64)   // for one missing solution
  {
    queensol[0]=3;      // provide that solution to the computer
    queensol[1]=1;
    queensol[2]=6;
    queensol[3]=2;
    queensol[4]=5;
    queensol[5]=7;
    queensol[6]=4;
    queensol[7]=0;
    display();
    return;
   }

for (;column<8;column++)	// value of column supplied inside the body
   {
     if ((queen-column)<=0) n=column-queen; else n=queen-column+7;
			// since diadown is from -7 to +7
     if ((col[column]) && (diaup[queen+column]) && (diadown[n]))
			// if all conditions true, place !!
       {
	 queensol[queen]=column;	// store correct position in queensol[]
	 col[column]=0;		// conditions become false for placed queen
	 diaup[queen+column]=0;
	 diadown[n]=0;
	 queen++;		// now next queen should be placed
	 if (queen==8) 		// if all queen are placed, display solution
	  {
	    display();
	    return;
	  }
	 else
	  {
	    column=0;	   // if all queens not placed, find position
	    funda();	   // for the new queen
	    return;
	  }
	}
   }
backtrace();  // removing wrong queens (will come here when loop is over)
}

// ******  TO CHANGE POSITION OF PREVIOUS QUEEN   ******
// ******   	i.e.  BACKTRACING .... *******

void backtrace()	// changing position of last queen
{
queen--;

if (queen==0)		// if backtracing has lead to first queen
   if (queensol[queen]==3)     // if first queen is on 4th column
      {
       nosol();         // no more soln.
       return;
      }
column=queensol[queen]+1;	// removed queen will be checked one
				// column onwards from where it was
				// already placed

col[column-1]=1;                // for removed queen, all conditions
diaup[queen+column-1]=1;	// will become true now
if ((queen-column+1)<=0)
   n=column-queen-1;
else
   n=queen-column+8;
diadown[n]=1;
funda();			// go back to find position
return;
}

// ******  TO DISPLAY THE SOLUTIONS  ********

void display()
{
 setcolor(8);
 char s1[3];
 itoa(++no_of_sol,s1,10);        // to convert integer to character
 outtextxy(170,40,s1);
 char s2[3];
 itoa(++no_of_sol,s2,10);
 outtextxy(490,40,s2);
 putqueen();			//  place the queens
 outtextxy(200,460,"Want more solutions ?(y/n)");
 char ch;
 enter:
 ch=getch();
 if (ch=='y'||ch=='Y')             // if more solutions ...
   {
     putqueen();			//  delete queens already placed
     setcolor(14);
     outtextxy(170,40,s1);
     outtextxy(490,40,s2);
     backtracenew();			//  start backtracing from 5th queen onwards
   }
 else if (ch=='n'||ch=='N')      // if don't want more solutions
   {
     delete buff;		//  go to main menu
     closegraph();
     restorecrtmode();
     choice_page();
     return;
    }
  else goto enter;
}

//  ******  TO CHANGE POSITION OF LAST FOUR QUEENS  *******
//  ******  IN CASE A SOLUTION HAS BEEN FOUND  *******

void backtracenew()    // since no more new valid positions for queen > 4 now
{
queen=4;
for (int i=4;i<8;i++)	// All conditions for queens from 4 to 8 will
  {			// become true now since they are being
    int temp;		// repositioned...
    temp=queensol[i];
    col[temp]=1;
    diaup[temp+i]=1;
    if ((i-temp)<=0)
      n=temp-i;
    else
      n=i-temp+7;
    diadown[n]=1;
   }
column=queensol[queen]+1;
funda();
return;
}

// *****  NO SOLUTION  ******

void nosol()            // No more valid position for the 8 queens now
{
delete buff;
closegraph();
restorecrtmode();
initgraph(&gd,&gm,"c:\\tc\\bgi");
setcolor(9);
settextstyle(4,0,6);
outtextxy(100,100,"No more solutions");
setcolor(10);
settextstyle(7,0,2);
outtextxy(80,400,"Press any key to return to main menu . . . . .");
getch();
closegraph();
restorecrtmode();
choice_page();
}

//  ******  TO POSITION THE QUEENS  ********
//  *****    (called from the display fn.) ********

void putqueen()
{
int  x=23,y=64;
for (int i=0;i<8;i++)
  {
    putimage(x+queensol[i]*30,y,buff,1);
    putimage(x+320+(7-queensol[i])*30,y,buff,1);
    y+=30;
   }
}

//  *******   I N S T R U C T I O N S  ***********

void instructions()
{
initgraph(&gd,&gm,"c:\\tc\\bgi");
setcolor(4);
rectangle(15,20,639,479);
char *s="I N S T R U C T I O N S";
int x=300,y=40;				// To write 'Instructions' as
settextstyle(7,0,3);			// as if it is bouncing off the
while(x>45)				// boundaries .....
  {
    setcolor(10);
    outtextxy(x,y,s);
    delay(150);
    setcolor(0);
    outtextxy(x,y,s);
    x-=40;y+=20;
  }
sound(150);
delay(150);
nosound();
while (y<439)
  {
    setcolor(10);
    outtextxy(x,y,s);
    delay(150);
    setcolor(0);
    outtextxy(x,y,s);
    x+=10;
    y+=20;
  }
sound(150);
delay(150);
nosound();
while(x<300)
  {
    setcolor(10);
    outtextxy(x,y,s);
    delay(150);
    setcolor(0);
    outtextxy(x,y,s);
    x+=20;
    y-=20;
  }
sound(150);
delay(150);
nosound();
while( x>160)
  {
    setcolor(10);
	outtextxy(x,y,s);
    delay(150);
    setcolor(0);
    outtextxy(x,y,s);
    x-=20;
    y-=25;
   }
sound(150);
delay(150);
nosound();
setcolor(10);
outtextxy(x,y,s);
s="-------------------------";		// To draw a line as if it is
x=128,y=460;				// coming up from the bottom...
while(y>107)
   {
     setcolor(13);
     outtextxy(x,y,s);
     sound(200+y*5);
     delay(100);
	 setcolor(0);
     outtextxy(x,y,s);
     y-=5;
     nosound();
    }
setcolor(13);
outtextxy(x,y,s);
drawpixel(16,21,145,3000);
setcolor(4);
line(15,145,639,145);
settextstyle(1,0,2);
setcolor(9);
outtextxy(160,160,"I N T R O D U C T I O N ");        // Telling how to
setcolor(14);                                        //  play the game
outtextxy(150,180,"====================");
setcolor(15);
settextstyle(7,0,1);
outtextxy(70,210,"In this game of ");
setcolor(2);
outtextxy(240,210,"\"Eight Queens\"");
setcolor(15);
outtextxy(380,210," , you have to place ");
outtextxy(20,240," eight queens on the chess board such that no queen crosses");
outtextxy(20,270," any other queen , i.e. , no queen is in the vertical, ");
outtextxy(20,300," horizontal or diagonal path of any other queen. ");
outtextxy(70,330," As goes a famous cliche : ");
setcolor(11);
outtextxy(80,360,"\" A picture is worth a thousand words ... \"");
setcolor(15);
outtextxy(30,390," The pictorial example next page will make things clearer .");
keytocont();
setfillstyle(1,0);
floodfill(40,200,4);
chess(45,160,15);
chess(265,160,15);
chess(485,160,15);
setcolor(1);
setfillstyle(1,14);
line(50,350,54,359);
line(54,359,45,359);
line(45,359,50,350);
floodfill(51,355,1);
setcolor(13);
settextstyle(1,0,1);
outtextxy(75,290,"Fig. 1");
outtextxy(295,290,"Fig. 2");
outtextxy(525,290,"Fig. 3");
pic=new int (sizeof(imagesize(45,350,54,359)));  // Get image of queen
getimage(45,350,54,369,pic);
putimage(45,350,pic,1);
putimage(63,208,pic,1);
xx=63;yy=208;
setcolor(15);
settextstyle(0,0,2);
outtextxy(50,350,"Suppose a queen is placed as ");
outtextxy(50,380,"shown in fig. 1.");
keytocont();
erase();
putimage(123,208,pic,1);
outtextxy(30,350,"Now if you place another queen in the ");
outtextxy(30,380,"same row as shown , see what happens . ");
keytocont();
horizontal(123,70);
erase();
keytocont();
erase();
putimage(123,208,pic,1);
putimage(63,268,pic,1);
outtextxy(25,350,"If you place another queen in the same");
outtextxy(25,380,"column as shown, see what happens .");
keytocont();
erase();
vertical(268,210);
keytocont();
erase();
putimage(63,268,pic,1);
putimage(108,253,pic,1);
outtextxy(25,350,"If you place another queen in the same");
outtextxy(25,380,"lower diagonal as shown ...");
keytocont();
diagonaldown(253,210);
erase();
keytocont();
erase();
putimage(108,253,pic,1);
putimage(108,163,pic,1);
outtextxy(25,350,"And if you place another queen in the ");
outtextxy(25,380,"same upper diagonal as shown ....");
keytocont();
diagonalup(163,208);
erase();
keytocont();
erase();
putimage(343,193,pic,1);
putimage(283,238,pic,1);
putimage(268,163,pic,1);
putimage(328,253,pic,1);
outtextxy(25,350,"Now say four queens are placed as ");
outtextxy(25,380,"shown in Fig. 2. ");
keytocont();
erase();
putimage(343,238,pic,1);
outtextxy(25,340,"And you place the fifth queen as");
outtextxy(25,370,"shown. What happens ?? All previously");
outtextxy(25,400,"placed four queens are crossing it.");
outtextxy(110,430,"S E E   H O W   ! ! ");
keytocont();
erase();
outtextxy(70,340,"1. D I A G O N A L L Y   D O W N");
xx=268;yy=163;
diagonaldown(238,163);
keytocont();
xx=283;yy=238;
outtextxy(70,370,"2. H O R I Z O N T A L L Y ");
horizontal(343,283);
keytocont();
xx=343;yy=193;
outtextxy(70,400,"3. V E R T I C A L L Y");
vertical(238,193);
keytocont();
xx=328;yy=253;
outtextxy(70,430,"4. D I A G O N A L L Y    U P");
diagonalup(238,253);
keytocont();
erase();
putimage(488,163,pic,1);
putimage(518,178,pic,1);
putimage(548,193,pic,1);
putimage(578,208,pic,1);
putimage(503,223,pic,1);
putimage(533,238,pic,1);
putimage(563,253,pic,1);
outtextxy(25,340,"Now say 7 queens are placed as");
outtextxy(25,370,"shown in Fig. 3. First note that ");
outtextxy(25,400,"no queen is crossing each other. ");
outtextxy(100,430," R I G H T ? ? ");
keytocont();
erase();
outtextxy(25,350,"But hey !!! Where will you place the ");
outtextxy(25,380,"eighth queen ? ? ? ? ");
outtextxy(25,410,"S T U C K  ! !  Right ? ? ");
keytocont();
erase();
outtextxy(25,350,"I hope you have understood this game");
outtextxy(25,380,"very well by now. So I think you'd   ");
outtextxy(25,410,"like to use your brains now.  ");
keytocont();
setfillstyle(1,0);
bar(16,146,638,478);
settextstyle(7,0,2);
outtextxy(120,170,"O N E   L A S T  T H I N G  . . . . ");
setcolor(14);
outtextxy(75,180,"--------------------------------------");
setcolor(15);
outtextxy(80,220,"Keys which you can use are mentioned ");
outtextxy(80,270,"on the playing area itself. Besides the");
outtextxy(80,320,"keys defined there, you could also use ");
outtextxy(80,370,"the arrow keys . ");
setcolor(11);
outtextxy(80,420,"B E S T   O F   L U C K  ");
setcolor(15);
outtextxy(380,420,", then ! ! ");
settextstyle(7,0,1);
setcolor(2);
outtextxy(120,450,"Press any key to return to main menu . . . . ");
getch();
delete pic;
closegraph();
restorecrtmode();
choice_page();
return;
}

//  *****  PRESS ANY KEY TO CONTINUE  *****

void keytocont()
{
setcolor(12);
settextstyle(0,0,1);
outtextxy(170,460,"Press any key to continue . . . . ");
setcolor(15);
settextstyle(0,0,2);
getch();
}

//  *****  CLEAR TEXT *****

void erase()
{
setfillstyle(1,0);
bar(16,340,638,478);
}

//  *****  CUT HORIZONTALLY ****

void horizontal(int a, int b)
{
  while(xx<a)
   {
	putimage(xx,yy,pic,1);
	xx+=15;
	putimage(xx,yy,pic,1);
	sound(100+xx*5);
	delay(80);
	nosound();
    }
  while(xx>b)
    {
	putimage(xx,yy,pic,1);
	xx-=15;
	putimage(xx,yy,pic,1);
	sound(100+xx*5);
	delay(80);
	nosound();
    }
}

//  ****  CUT VERTICALLY ****

void vertical(int a, int b)
{
  while(yy<a)
    {
	putimage(xx,yy,pic,1);
	yy+=15;
	putimage(xx,yy,pic,1);
	sound(100+yy*5);
	delay(80);
	nosound();
     }
  while(yy>b)
     {
	putimage(xx,yy,pic,1);
	yy-=15;
	putimage(xx,yy,pic,1);
	sound(100+yy*5);
	delay(80);
	nosound();
      }
}

// ****  CUT DOWN DIAGONALLY  ****

void diagonaldown(int a,int b)
{
 while(yy<a)
     {
	putimage(xx,yy,pic,1);
	yy+=15;xx+=15;
	putimage(xx,yy,pic,1);
	sound(100+yy*5);
	delay(80);
	nosound();
      }
 while(yy>b)
      {
	putimage(xx,yy,pic,1);
	yy-=15;xx-=15;
	putimage(xx,yy,pic,1);
	sound(100+yy*5);
	delay(80);
	nosound();
       }
}

// ****  CUT UP DIAGONALLY  ****

void diagonalup(int a,int b)
{
 while(yy>a)
      {
	putimage(xx,yy,pic,1);
	yy-=15;xx+=15;
	putimage(xx,yy,pic,1);
	sound(100+yy*5);
	delay(80);
	nosound();
	   }
 while(yy<b)
	   {
	putimage(xx,yy,pic,1);
	yy+=15;xx-=15;
	putimage(xx,yy,pic,1);
	sound(100+yy*5);
	delay(80);
	nosound();
	   }
}